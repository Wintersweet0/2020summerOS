{"message":"`main` function not found in crate `ex32`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate. To fix this error, add a\n`main` function. For example:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":0,"byte_end":5282,"line_start":1,"line_end":211,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use std::rc::Rc;","highlight_start":1,"highlight_end":17},{"text":"use std::cell::RefCell;","highlight_start":1,"highlight_end":24},{"text":"use std::clone::Clone;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Debug)]","highlight_start":1,"highlight_end":17},{"text":"struct ListNode","highlight_start":1,"highlight_end":16},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    value :i32,","highlight_start":1,"highlight_end":16},{"text":"    next: Option<Rc<RefCell<ListNode>>>,","highlight_start":1,"highlight_end":41},{"text":"    prev: Option<Rc<RefCell<ListNode>>>","highlight_start":1,"highlight_end":40},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[derive(Debug)]","highlight_start":1,"highlight_end":17},{"text":"pub struct List{","highlight_start":1,"highlight_end":17},{"text":"    count: i32,","highlight_start":1,"highlight_end":16},{"text":"    first: Option<Rc<RefCell<ListNode>>>,","highlight_start":1,"highlight_end":42},{"text":"    last: Option<Rc<RefCell<ListNode>>>","highlight_start":1,"highlight_end":40},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl ListNode {","highlight_start":1,"highlight_end":16},{"text":"    fn new(value:i32) -> Rc<RefCell<ListNode>>{","highlight_start":1,"highlight_end":48},{"text":"        let pointer = Rc::new(RefCell::new(ListNode {","highlight_start":1,"highlight_end":54},{"text":"            value,","highlight_start":1,"highlight_end":19},{"text":"            next: None,","highlight_start":1,"highlight_end":24},{"text":"            prev: None,","highlight_start":1,"highlight_end":24},{"text":"        }));","highlight_start":1,"highlight_end":13},{"text":"        Rc::clone(&pointer)","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl List {","highlight_start":1,"highlight_end":12},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn new() -> List {","highlight_start":1,"highlight_end":27},{"text":"        let first = ListNode::new(0);","highlight_start":1,"highlight_end":38},{"text":"        let last = ListNode::new(0);","highlight_start":1,"highlight_end":37},{"text":"        first.borrow_mut().next = Some(Rc::clone(&last));","highlight_start":1,"highlight_end":58},{"text":"        last.borrow_mut().prev = Some(Rc::clone(&first));","highlight_start":1,"highlight_end":58},{"text":"        List {","highlight_start":1,"highlight_end":15},{"text":"            count: 0,","highlight_start":1,"highlight_end":22},{"text":"            first: Some(first),","highlight_start":1,"highlight_end":32},{"text":"            last: Some(last),","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_count(&self) -> i32 {","highlight_start":1,"highlight_end":38},{"text":"        self.count","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_push(&mut self,value:i32){","highlight_start":1,"highlight_end":43},{"text":"        let node = ListNode::new(value);","highlight_start":1,"highlight_end":41},{"text":"        if let Some(ref l) = self.last {","highlight_start":1,"highlight_end":41},{"text":"            let mut n = node.borrow_mut();","highlight_start":1,"highlight_end":43},{"text":"            n.next = Some(Rc::clone(&l));","highlight_start":1,"highlight_end":42},{"text":"            if let Some(ref p) = l.borrow().prev {","highlight_start":1,"highlight_end":51},{"text":"                n.prev = Some(Rc::clone(&p));","highlight_start":1,"highlight_end":46},{"text":"                p.borrow_mut().next = Some(Rc::clone(&node));","highlight_start":1,"highlight_end":62},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            l.borrow_mut().prev = Some(Rc::clone(&node));","highlight_start":1,"highlight_end":58},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        self.count = self.count+1;","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_unshift(&mut self, value:i32){","highlight_start":1,"highlight_end":47},{"text":"        let node = ListNode::new(value);","highlight_start":1,"highlight_end":41},{"text":"        if let Some(ref f) = self.first {","highlight_start":1,"highlight_end":42},{"text":"            let mut n = node.borrow_mut();","highlight_start":1,"highlight_end":43},{"text":"            n.prev = Some(Rc::clone(&f));","highlight_start":1,"highlight_end":42},{"text":"            if let Some(ref p) = f.borrow().next {","highlight_start":1,"highlight_end":51},{"text":"                n.next = Some(Rc::clone(&p));","highlight_start":1,"highlight_end":46},{"text":"                p.borrow_mut().prev = Some(Rc::clone(&node));","highlight_start":1,"highlight_end":62},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            f.borrow_mut().next = Some(Rc::clone(&node));","highlight_start":1,"highlight_end":58},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        self.count = self.count+1;","highlight_start":1,"highlight_end":35},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_shift(&mut self) -> i32 {","highlight_start":1,"highlight_end":42},{"text":"        if self.count == 0 {","highlight_start":1,"highlight_end":29},{"text":"            panic!(\"No Items for pop!\");","highlight_start":1,"highlight_end":41},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let mut value = 0;","highlight_start":1,"highlight_end":27},{"text":"        let mut pointer_pnext = None;","highlight_start":1,"highlight_end":38},{"text":"        if let Some(ref f) = self.first {","highlight_start":1,"highlight_end":42},{"text":"            if let Some(ref p) = f.borrow().next {","highlight_start":1,"highlight_end":51},{"text":"                if let Some(ref pnext) = p.borrow().next {","highlight_start":1,"highlight_end":59},{"text":"                    pointer_pnext = Some(Rc::clone(&pnext));","highlight_start":1,"highlight_end":61},{"text":"                    pnext.borrow_mut().prev = Some(Rc::clone(&f));","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                value = p.borrow().value;","highlight_start":1,"highlight_end":42},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            f.borrow_mut().next = pointer_pnext;","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        self.count = self.count-1;","highlight_start":1,"highlight_end":35},{"text":"        value","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_pop(&mut self) -> i32 {","highlight_start":1,"highlight_end":40},{"text":"        if self.count == 0 {","highlight_start":1,"highlight_end":29},{"text":"            panic!(\"No Items for pop!\");","highlight_start":1,"highlight_end":41},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let mut value = 0;","highlight_start":1,"highlight_end":27},{"text":"        let mut pointer_pnext = None;","highlight_start":1,"highlight_end":38},{"text":"        if let Some(ref l) = self.last {","highlight_start":1,"highlight_end":41},{"text":"            if let Some(ref p) = l.borrow().prev {","highlight_start":1,"highlight_end":51},{"text":"                if let Some(ref pnext) = p.borrow().prev {","highlight_start":1,"highlight_end":59},{"text":"                    pointer_pnext = Some(Rc::clone(&pnext));","highlight_start":1,"highlight_end":61},{"text":"                    pnext.borrow_mut().next = Some(Rc::clone(&l));","highlight_start":1,"highlight_end":67},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                value = p.borrow().value;","highlight_start":1,"highlight_end":42},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"            l.borrow_mut().prev = pointer_pnext;","highlight_start":1,"highlight_end":49},{"text":"        };","highlight_start":1,"highlight_end":11},{"text":"        self.count = self.count-1;","highlight_start":1,"highlight_end":35},{"text":"        value","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_first(&self) -> i32 {","highlight_start":1,"highlight_end":38},{"text":"        if self.count == 0 {","highlight_start":1,"highlight_end":29},{"text":"            panic!(\"No Items!\");","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let mut value = 0;","highlight_start":1,"highlight_end":27},{"text":"        if let Some(ref f) = self.first {","highlight_start":1,"highlight_end":42},{"text":"            if let Some(ref n) = f.borrow().next {","highlight_start":1,"highlight_end":51},{"text":"                value = n.borrow().value;","highlight_start":1,"highlight_end":42},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        value","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_last(&self) -> i32 {","highlight_start":1,"highlight_end":37},{"text":"        if self.count == 0 {","highlight_start":1,"highlight_end":29},{"text":"            panic!(\"No Items!\");","highlight_start":1,"highlight_end":33},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        let mut value = 0;","highlight_start":1,"highlight_end":27},{"text":"        if let Some(ref l) = self.last {","highlight_start":1,"highlight_end":41},{"text":"            if let Some(ref p) = l.borrow().prev {","highlight_start":1,"highlight_end":51},{"text":"                value = p.borrow().value;","highlight_start":1,"highlight_end":42},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        value","highlight_start":1,"highlight_end":14},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    pub fn list_clear(&mut self){","highlight_start":1,"highlight_end":34},{"text":"        while self.count > 0 {","highlight_start":1,"highlight_end":31},{"text":"            self.list_pop();","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod test {","highlight_start":1,"highlight_end":11},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_push_pop(){","highlight_start":1,"highlight_end":24},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_push(1);","highlight_start":1,"highlight_end":24},{"text":"        a.list_push(2);","highlight_start":1,"highlight_end":24},{"text":"        assert_eq!(a.list_pop(),2);","highlight_start":1,"highlight_end":36},{"text":"        assert_eq!(a.list_pop(),1);","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_shift(){","highlight_start":1,"highlight_end":21},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_unshift(3);","highlight_start":1,"highlight_end":27},{"text":"        a.list_unshift(1);","highlight_start":1,"highlight_end":27},{"text":"        a.list_unshift(2);","highlight_start":1,"highlight_end":27},{"text":"        assert_eq!(a.list_shift(),2);","highlight_start":1,"highlight_end":38},{"text":"        assert_eq!(a.list_shift(),1);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_shift_push(){","highlight_start":1,"highlight_end":26},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_push(1);","highlight_start":1,"highlight_end":24},{"text":"        a.list_push(2);","highlight_start":1,"highlight_end":24},{"text":"        assert_eq!(a.list_shift(),1);","highlight_start":1,"highlight_end":38},{"text":"        assert_eq!(a.list_shift(),2);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_clear(){","highlight_start":1,"highlight_end":21},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_push(1);","highlight_start":1,"highlight_end":24},{"text":"        a.list_push(2);","highlight_start":1,"highlight_end":24},{"text":"        a.list_clear();","highlight_start":1,"highlight_end":24},{"text":"        assert_eq!(a.list_count(),0);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    #[should_panic]","highlight_start":1,"highlight_end":20},{"text":"    fn test_pop_empty(){","highlight_start":1,"highlight_end":25},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_push(1);","highlight_start":1,"highlight_end":24},{"text":"        a.list_pop();","highlight_start":1,"highlight_end":22},{"text":"        a.list_pop();","highlight_start":1,"highlight_end":22},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn test_first_last(){","highlight_start":1,"highlight_end":26},{"text":"        let mut a = List::new();","highlight_start":1,"highlight_end":33},{"text":"        a.list_push(1);","highlight_start":1,"highlight_end":24},{"text":"        a.list_push(2);","highlight_start":1,"highlight_end":24},{"text":"        a.list_push(3);","highlight_start":1,"highlight_end":24},{"text":"        assert_eq!(a.list_first(),1);","highlight_start":1,"highlight_end":38},{"text":"        assert_eq!(a.list_last(),3);","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src\\main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `main` function not found in crate `ex32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::rc::Rc;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::cell::RefCell;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::clone::Clone;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src\\main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
